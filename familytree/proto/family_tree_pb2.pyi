"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import proto.utils_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class FamilyMember(google.protobuf.message.Message):
    """Family member information. Each node in the family tree will be stored as a FamilyMember"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AdditionalInfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NICKNAMES_FIELD_NUMBER: builtins.int
    DATE_OF_BIRTH_FIELD_NUMBER: builtins.int
    TRADITIONAL_DATE_OF_BIRTH_FIELD_NUMBER: builtins.int
    ALIVE_FIELD_NUMBER: builtins.int
    DATE_OF_DEATH_FIELD_NUMBER: builtins.int
    TRADITIONAL_DATE_OF_DEATH_FIELD_NUMBER: builtins.int
    GENDER_FIELD_NUMBER: builtins.int
    BIRTH_FAMILY_UNIT_ID_FIELD_NUMBER: builtins.int
    ACQUIRED_FAMILY_UNIT_ID_FIELD_NUMBER: builtins.int
    WEDDING_DATE_FIELD_NUMBER: builtins.int
    ADDITIONAL_INFO_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    alive: builtins.bool
    gender: proto.utils_pb2.Gender.ValueType
    birth_family_unit_id: builtins.str
    acquired_family_unit_id: builtins.str
    @property
    def nicknames(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def date_of_birth(self) -> proto.utils_pb2.GregorianDate: ...
    @property
    def traditional_date_of_birth(self) -> proto.utils_pb2.TraditionalDate: ...
    @property
    def date_of_death(self) -> proto.utils_pb2.GregorianDate: ...
    @property
    def traditional_date_of_death(self) -> proto.utils_pb2.TraditionalDate: ...
    @property
    def wedding_date(self) -> proto.utils_pb2.GregorianDate: ...
    @property
    def additional_info(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str = ...,
        nicknames: collections.abc.Iterable[builtins.str] | None = ...,
        date_of_birth: proto.utils_pb2.GregorianDate | None = ...,
        traditional_date_of_birth: proto.utils_pb2.TraditionalDate | None = ...,
        alive: builtins.bool | None = ...,
        date_of_death: proto.utils_pb2.GregorianDate | None = ...,
        traditional_date_of_death: proto.utils_pb2.TraditionalDate | None = ...,
        gender: proto.utils_pb2.Gender.ValueType = ...,
        birth_family_unit_id: builtins.str | None = ...,
        acquired_family_unit_id: builtins.str | None = ...,
        wedding_date: proto.utils_pb2.GregorianDate | None = ...,
        additional_info: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_acquired_family_unit_id", b"_acquired_family_unit_id", "_alive", b"_alive", "_birth_family_unit_id", b"_birth_family_unit_id", "_wedding_date", b"_wedding_date", "acquired_family_unit_id", b"acquired_family_unit_id", "alive", b"alive", "birth_family_unit_id", b"birth_family_unit_id", "date_of_birth", b"date_of_birth", "date_of_death", b"date_of_death", "traditional_date_of_birth", b"traditional_date_of_birth", "traditional_date_of_death", b"traditional_date_of_death", "wedding_date", b"wedding_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_acquired_family_unit_id", b"_acquired_family_unit_id", "_alive", b"_alive", "_birth_family_unit_id", b"_birth_family_unit_id", "_wedding_date", b"_wedding_date", "acquired_family_unit_id", b"acquired_family_unit_id", "additional_info", b"additional_info", "alive", b"alive", "birth_family_unit_id", b"birth_family_unit_id", "date_of_birth", b"date_of_birth", "date_of_death", b"date_of_death", "gender", b"gender", "id", b"id", "name", b"name", "nicknames", b"nicknames", "traditional_date_of_birth", b"traditional_date_of_birth", "traditional_date_of_death", b"traditional_date_of_death", "wedding_date", b"wedding_date"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_acquired_family_unit_id", b"_acquired_family_unit_id"]) -> typing.Literal["acquired_family_unit_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_alive", b"_alive"]) -> typing.Literal["alive"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_birth_family_unit_id", b"_birth_family_unit_id"]) -> typing.Literal["birth_family_unit_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_wedding_date", b"_wedding_date"]) -> typing.Literal["wedding_date"] | None: ...

global___FamilyMember = FamilyMember

@typing.final
class Relationships(google.protobuf.message.Message):
    """Relationship (Edges) between family members"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHILDREN_IDS_FIELD_NUMBER: builtins.int
    SPOUSE_IDS_FIELD_NUMBER: builtins.int
    PARENT_IDS_FIELD_NUMBER: builtins.int
    @property
    def children_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def spouse_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def parent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        children_ids: collections.abc.Iterable[builtins.str] | None = ...,
        spouse_ids: collections.abc.Iterable[builtins.str] | None = ...,
        parent_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["children_ids", b"children_ids", "parent_ids", b"parent_ids", "spouse_ids", b"spouse_ids"]) -> None: ...

global___Relationships = Relationships

@typing.final
class FamilyUnit(google.protobuf.message.Message):
    """Group that denotes a single household or the most granular family consisting of partners and children"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class AdditionalInfoEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PARENT_IDS_FIELD_NUMBER: builtins.int
    CHILD_IDS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    ADDITIONAL_INFO_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    @property
    def parent_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def child_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def additional_info(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        parent_ids: collections.abc.Iterable[builtins.str] | None = ...,
        child_ids: collections.abc.Iterable[builtins.str] | None = ...,
        name: builtins.str = ...,
        additional_info: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["additional_info", b"additional_info", "child_ids", b"child_ids", "id", b"id", "name", b"name", "parent_ids", b"parent_ids"]) -> None: ...

global___FamilyUnit = FamilyUnit

@typing.final
class FamilyTree(google.protobuf.message.Message):
    """Family Tree with all the members and relationships"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MembersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___FamilyMember: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___FamilyMember | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class RelationshipsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Relationships: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Relationships | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class FamilyUnitsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___FamilyUnit: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___FamilyUnit | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MEMBERS_FIELD_NUMBER: builtins.int
    RELATIONSHIPS_FIELD_NUMBER: builtins.int
    FAMILY_UNITS_FIELD_NUMBER: builtins.int
    @property
    def members(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___FamilyMember]: ...
    @property
    def relationships(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Relationships]: ...
    @property
    def family_units(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___FamilyUnit]: ...
    def __init__(
        self,
        *,
        members: collections.abc.Mapping[builtins.str, global___FamilyMember] | None = ...,
        relationships: collections.abc.Mapping[builtins.str, global___Relationships] | None = ...,
        family_units: collections.abc.Mapping[builtins.str, global___FamilyUnit] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["family_units", b"family_units", "members", b"members", "relationships", b"relationships"]) -> None: ...

global___FamilyTree = FamilyTree
