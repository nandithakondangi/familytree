// /home/aadithya93/projects/familytree/resources/pyvis_browser_interaction.js.template
// This script is intended for direct browser use, without QWebChannel.

console.log("pyvis_browser_interaction.js template loaded.");

function attachVisNetworkListenerForBrowser() {
    // Wait for the network object to be potentially available
    // The 'network' object is globally exposed by PyVis when the graph is rendered.
    let attempts = 0;
    const maxAttempts = 20; // Try for 10 seconds (20 * 500ms)
    const interval = 500; // 500ms

    function tryAttach() {
        if (typeof network !== 'undefined' && network) {
            console.log("Attaching event listeners to vis.js network (browser mode).");

            // Double-click event
            network.on("doubleClick", function (params) {
                console.log("DoubleClick event received (browser mode):", params);
                if (params.nodes && params.nodes.length > 0) {
                    var nodeId = params.nodes[0];
                    console.log("Node double-clicked (browser mode):", nodeId);

                    // Placeholder for backend API call
                    // Example: fetch(`/api/familytree/member/${nodeId}/details`, { method: 'GET' })
                    //   .then(response => response.json())
                    //   .then(data => console.log('Received data from backend:', data))
                    //   .catch(error => console.error('Error fetching from backend:', error));
                    console.log(`TODO: Call backend API for double-clicked node: ${nodeId}`);
                    alert(`Node double-clicked: ${nodeId}. Implement backend call here.`);
                } else {
                    console.log("DoubleClick detected, but not on a node (browser mode).");
                }
            });

            // Right-click (contextmenu) event
            network.on("oncontext", function (params) {
                params.event.preventDefault(); // Prevent the default browser context menu
                var nodeId = network.getNodeAt(params.pointer.DOM);
                if (nodeId) {
                    console.log("Right-clicked node ID (browser mode):", nodeId);
                    console.log("Pointer DOM (canvas) coordinates:", params.pointer.DOM);
                    console.log("Pointer Canvas coordinates:", params.pointer.canvas);

                    // Placeholder for backend API call or custom context menu logic
                    // Example: displayCustomContextMenu(nodeId, params.event.clientX, params.event.clientY);
                    // Example: fetch(`/api/familytree/member/${nodeId}/actions`, { method: 'GET' })
                    console.log(`TODO: Implement custom context menu or API call for right-clicked node: ${nodeId}`);
                    alert(`Node right-clicked: ${nodeId}. Screen X: ${params.event.clientX}, Screen Y: ${params.event.clientY}. Implement backend call/custom menu here.`);
                }
            });

            console.log("Event listeners attached (browser mode).");
        } else {
            attempts++;
            if (attempts < maxAttempts) {
                console.warn(`vis.js network object not found yet (attempt ${attempts}/${maxAttempts}), retrying listener attachment...`);
                setTimeout(tryAttach, interval);
            } else {
                console.error("vis.js network object not found after multiple attempts. Event listeners not attached.");
            }
        }
    }
    tryAttach(); // Start the first attempt
}

// Call the function to attach listeners once the DOM is ready,
// or if PyVis initializes later, it should still find the 'network' object.
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', attachVisNetworkListenerForBrowser);
} else {
    // DOMContentLoaded has already fired
    attachVisNetworkListenerForBrowser();
}