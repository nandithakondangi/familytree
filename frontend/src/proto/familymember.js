// source: proto/family_tree.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.family_tree.FamilyMember');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.utils.GregorianDate');
goog.require('proto.utils.TraditionalDate');

goog.forwardDeclare('proto.utils.Gender');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.family_tree.FamilyMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.family_tree.FamilyMember.repeatedFields_, null);
};
goog.inherits(proto.family_tree.FamilyMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.family_tree.FamilyMember.displayName = 'proto.family_tree.FamilyMember';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.family_tree.FamilyMember.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.family_tree.FamilyMember.prototype.toObject = function(opt_includeInstance) {
  return proto.family_tree.FamilyMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.family_tree.FamilyMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.family_tree.FamilyMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nicknamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    dateOfBirth: (f = msg.getDateOfBirth()) && proto.utils.GregorianDate.toObject(includeInstance, f),
    traditionalDateOfBirth: (f = msg.getTraditionalDateOfBirth()) && proto.utils.TraditionalDate.toObject(includeInstance, f),
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    dateOfDeath: (f = msg.getDateOfDeath()) && proto.utils.GregorianDate.toObject(includeInstance, f),
    traditionalDateOfDeath: (f = msg.getTraditionalDateOfDeath()) && proto.utils.TraditionalDate.toObject(includeInstance, f),
    gender: jspb.Message.getFieldWithDefault(msg, 9, 0),
    birthFamilyUnitId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    marriageFamilyUnitId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    weddingDate: (f = msg.getWeddingDate()) && proto.utils.GregorianDate.toObject(includeInstance, f),
    additionalInfoMap: (f = msg.getAdditionalInfoMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.family_tree.FamilyMember}
 */
proto.family_tree.FamilyMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.family_tree.FamilyMember;
  return proto.family_tree.FamilyMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.family_tree.FamilyMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.family_tree.FamilyMember}
 */
proto.family_tree.FamilyMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addNicknames(value);
      break;
    case 4:
      var value = new proto.utils.GregorianDate;
      reader.readMessage(value,proto.utils.GregorianDate.deserializeBinaryFromReader);
      msg.setDateOfBirth(value);
      break;
    case 5:
      var value = new proto.utils.TraditionalDate;
      reader.readMessage(value,proto.utils.TraditionalDate.deserializeBinaryFromReader);
      msg.setTraditionalDateOfBirth(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    case 7:
      var value = new proto.utils.GregorianDate;
      reader.readMessage(value,proto.utils.GregorianDate.deserializeBinaryFromReader);
      msg.setDateOfDeath(value);
      break;
    case 8:
      var value = new proto.utils.TraditionalDate;
      reader.readMessage(value,proto.utils.TraditionalDate.deserializeBinaryFromReader);
      msg.setTraditionalDateOfDeath(value);
      break;
    case 9:
      var value = /** @type {!proto.utils.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBirthFamilyUnitId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMarriageFamilyUnitId(value);
      break;
    case 12:
      var value = new proto.utils.GregorianDate;
      reader.readMessage(value,proto.utils.GregorianDate.deserializeBinaryFromReader);
      msg.setWeddingDate(value);
      break;
    case 13:
      var value = msg.getAdditionalInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.family_tree.FamilyMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.family_tree.FamilyMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.family_tree.FamilyMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.family_tree.FamilyMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNicknamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDateOfBirth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.utils.GregorianDate.serializeBinaryToWriter
    );
  }
  f = message.getTraditionalDateOfBirth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.utils.TraditionalDate.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDateOfDeath();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.utils.GregorianDate.serializeBinaryToWriter
    );
  }
  f = message.getTraditionalDateOfDeath();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.utils.TraditionalDate.serializeBinaryToWriter
    );
  }
  f = message.getGender();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getWeddingDate();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.utils.GregorianDate.serializeBinaryToWriter
    );
  }
  f = message.getAdditionalInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.family_tree.FamilyMember.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.family_tree.FamilyMember.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string nicknames = 3;
 * @return {!Array<string>}
 */
proto.family_tree.FamilyMember.prototype.getNicknamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setNicknamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.addNicknames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearNicknamesList = function() {
  return this.setNicknamesList([]);
};


/**
 * optional utils.GregorianDate date_of_birth = 4;
 * @return {?proto.utils.GregorianDate}
 */
proto.family_tree.FamilyMember.prototype.getDateOfBirth = function() {
  return /** @type{?proto.utils.GregorianDate} */ (
    jspb.Message.getWrapperField(this, proto.utils.GregorianDate, 4));
};


/**
 * @param {?proto.utils.GregorianDate|undefined} value
 * @return {!proto.family_tree.FamilyMember} returns this
*/
proto.family_tree.FamilyMember.prototype.setDateOfBirth = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearDateOfBirth = function() {
  return this.setDateOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasDateOfBirth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional utils.TraditionalDate traditional_date_of_birth = 5;
 * @return {?proto.utils.TraditionalDate}
 */
proto.family_tree.FamilyMember.prototype.getTraditionalDateOfBirth = function() {
  return /** @type{?proto.utils.TraditionalDate} */ (
    jspb.Message.getWrapperField(this, proto.utils.TraditionalDate, 5));
};


/**
 * @param {?proto.utils.TraditionalDate|undefined} value
 * @return {!proto.family_tree.FamilyMember} returns this
*/
proto.family_tree.FamilyMember.prototype.setTraditionalDateOfBirth = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearTraditionalDateOfBirth = function() {
  return this.setTraditionalDateOfBirth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasTraditionalDateOfBirth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool alive = 6;
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setAlive = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearAlive = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasAlive = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional utils.GregorianDate date_of_death = 7;
 * @return {?proto.utils.GregorianDate}
 */
proto.family_tree.FamilyMember.prototype.getDateOfDeath = function() {
  return /** @type{?proto.utils.GregorianDate} */ (
    jspb.Message.getWrapperField(this, proto.utils.GregorianDate, 7));
};


/**
 * @param {?proto.utils.GregorianDate|undefined} value
 * @return {!proto.family_tree.FamilyMember} returns this
*/
proto.family_tree.FamilyMember.prototype.setDateOfDeath = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearDateOfDeath = function() {
  return this.setDateOfDeath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasDateOfDeath = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional utils.TraditionalDate traditional_date_of_death = 8;
 * @return {?proto.utils.TraditionalDate}
 */
proto.family_tree.FamilyMember.prototype.getTraditionalDateOfDeath = function() {
  return /** @type{?proto.utils.TraditionalDate} */ (
    jspb.Message.getWrapperField(this, proto.utils.TraditionalDate, 8));
};


/**
 * @param {?proto.utils.TraditionalDate|undefined} value
 * @return {!proto.family_tree.FamilyMember} returns this
*/
proto.family_tree.FamilyMember.prototype.setTraditionalDateOfDeath = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearTraditionalDateOfDeath = function() {
  return this.setTraditionalDateOfDeath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasTraditionalDateOfDeath = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional utils.Gender gender = 9;
 * @return {!proto.utils.Gender}
 */
proto.family_tree.FamilyMember.prototype.getGender = function() {
  return /** @type {!proto.utils.Gender} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.utils.Gender} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setGender = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int64 birth_family_unit_id = 10;
 * @return {number}
 */
proto.family_tree.FamilyMember.prototype.getBirthFamilyUnitId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setBirthFamilyUnitId = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearBirthFamilyUnitId = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasBirthFamilyUnitId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 marriage_family_unit_id = 11;
 * @return {number}
 */
proto.family_tree.FamilyMember.prototype.getMarriageFamilyUnitId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.setMarriageFamilyUnitId = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearMarriageFamilyUnitId = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasMarriageFamilyUnitId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional utils.GregorianDate wedding_date = 12;
 * @return {?proto.utils.GregorianDate}
 */
proto.family_tree.FamilyMember.prototype.getWeddingDate = function() {
  return /** @type{?proto.utils.GregorianDate} */ (
    jspb.Message.getWrapperField(this, proto.utils.GregorianDate, 12));
};


/**
 * @param {?proto.utils.GregorianDate|undefined} value
 * @return {!proto.family_tree.FamilyMember} returns this
*/
proto.family_tree.FamilyMember.prototype.setWeddingDate = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearWeddingDate = function() {
  return this.setWeddingDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.family_tree.FamilyMember.prototype.hasWeddingDate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * map<string, string> additional_info = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.family_tree.FamilyMember.prototype.getAdditionalInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.family_tree.FamilyMember} returns this
 */
proto.family_tree.FamilyMember.prototype.clearAdditionalInfoMap = function() {
  this.getAdditionalInfoMap().clear();
  return this;};


